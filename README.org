* om-dash

#+BEGIN: om-dash--readme-toc
- [[#what-is-this?][What is this?]]
- [[#example-workflow][Example workflow]]
- [[#example-blocks][Example blocks]]
- [[#contributions][Contributions]]
- [[#releases][Releases]]
- [[#installation][Installation]]
- [[#updater-functions][Updater functions]]
- [[#dynamic-blocks][Dynamic blocks]]
- [[#templates][Templates]]
- [[#minor-mode][Minor mode]]
- [[#variables][Variables]]
- [[#faces][Faces]]
- [[#authors][Authors]]
- [[#license][License]]
#+END:

** What is this?

=om-dash= implements [[https://orgmode.org/manual/Dynamic-Blocks.html][dynamic blocks]] for org-mode that you can use to *compose a custom project dashboard*.

It was always a struggle to me to keep track of the "big picture" when I'm hopping between projects.

I wanted a tool that can give me a brief summary of all ongoing projects: what's done, what's next, and what requires attention. And then I realized that it can be easily implemented using org-mode, so here we go.

om-dash implementats a few configurable dynamic blocks:

- =om-dash-github-topics= - generates a table with issues or pull requests from github repository
- =om-dash-github-project-cards= - generates a table with cards from github classic project
- =om-dash-orgfile= - generates tables with top-level entries from an org file
- =om-dash-imap= - generates table with unread email counters for IMAP folder
- =om-dash-command= - generates a table from JSON or CSV output of a shell command
- =om-dash-function= - generates a table from output of a Elisp function

The package also provides a minor mode (=om-dash-mode=) that applies highlighting to the generated tables.

In addition, there is support for templates, which allow to create reusable parameterized configurations of the above blocks (e.g. for specific github query or shell command).

** Example workflow

Here I describe my own workflow. Yours can be different of course, but I think this should give the basic idea about this package.

For every project, I have three main sources of "things" to keep track of:

- github repository with issues and pull requests
- personal org file with tasks grouped into some kind of milestones (usually releases)
- a few IMAP directories with email related to this project (mailing lists, notifications, discussions)

On top of that, I have a file called "dashboard.org" with a top-level entry for every project, and a few second-level entries with om-dash dynamic blocks:

- a block with all open or recently merged pull requests from github
- another block with open github issues (for big projects, I display only issues from specific column of github kanban board, or from specific milestone)
- one block for every ongoing or upcoming milestone from my personal org file for this project, showing top level tasks from each milestone
- block with project's IMAP directories and unread email counters

Screenshot of a project from "dashboard.org" described above:

#+BEGIN_HTML
<img src="screenshot/project_example.png" width="650px"/>
#+END_HTML

** Example blocks

*** Github pull requests

Display all open pull requests and pull requests closed last month.

#+BEGIN_EXAMPLE
,#+BEGIN: om-dash-github-topics :repo "roc-streaming/roc-toolkit" :type pullreq :open "*" :closed "-1mo"
...
,#+END:
#+END_EXAMPLE

[[./screenshot/github_pull_requests.png]]

To filter github issues and pull requests, you can use either github search queries (with optional jq selector), or simple plist notation. See documentation below.

*** Github issues

Display all open issues except those which have "help wanted" label.

#+BEGIN_EXAMPLE
,#+BEGIN: om-dash-github-topics :repo "gavv/signal-estimator" :type issue :open "-label:\"help wanted\""
...
,#+END:
#+END_EXAMPLE

[[./screenshot/github_issues.png]]

To filter github issues and pull requests, you can use either github search queries (with optional jq selector), or simple plist notation. See documentation below.

*** Github project items

Display all items from github project v2 (non-clasic, a.k.a. beta) with project id "5", item type "Issue", and item status "In work".

#+BEGIN_EXAMPLE
,#+BEGIN: om-dash-github-project-items :owner "roc-streaming" :project 5 :type issue :status "In work"
...
,#+END:
#+END_EXAMPLE

[[./screenshot/github_project_items.png]]

*** Github project cards (classic)

Display all cards from github classic project (now being officially deprecated by github, but still working) with project id "2", card type "issue", and column name "In work".

#+BEGIN_EXAMPLE
,#+BEGIN: om-dash-github-project-cards :repo "roc-streaming/roc-toolkit" :project 2 :column "In work" :type issue :state open
...
,#+END:
#+END_EXAMPLE

[[./screenshot/github_project_cards.png]]

*** Tasks from org file

Display 1-level TODO tasks as tables with their child 2-level TODO tasks as table rows. Hide 1-level DONE tasks.

#+BEGIN_EXAMPLE
,#+BEGIN: om-dash-orgfile :file "~/cloud/org/roc-toolkit.org" :query (:todo-depth 2 :done-depth 0)
...
,#+END:
#+END_EXAMPLE

[[./screenshot/orgfile_tasks.png]]

To filter org tasks, you can use either org-ql sexp or string query, or simple plist notation. See documentation below.

*** Unread email counters from IMAP

Display new and unread email counters for IMAP directory tree.

#+BEGIN_SRC emacs-lisp
  (setq om-dash-imap-host "imap.example.com"
        ;; Optional, if unset, default is used
        om-dash-imap-port 143
        ;; Optional, if unset, read from ~/.authinfo
        om-dash-imap-user "john"
        om-dash-imap-password "secret"
        ;; Optional, if unset, auto-detected for server
        om-dash-imap-stream 'network
        om-dash-imap-auth 'login)
#+END_SRC

#+BEGIN_EXAMPLE
,#+BEGIN: om-dash-imap :folder "develop/roc"
...
,#+END:
#+END_EXAMPLE

[[./screenshot/imap_counters.png]]

*** Custom command and template

Display table generated by a shell command.

#+BEGIN_EXAMPLE
,#+BEGIN: om-dash-command :command "my-command arg1 arg2" :columns ("foo" "bar")
...
,#+END:
#+END_EXAMPLE

[[./screenshot/shell_command.png]]

This example assumes that =my-command= produces output in JSON format like this:

#+BEGIN_EXAMPLE
[
  { "foo": "value1", "bar": "value2" },
  { "foo": "value3", "bar": "value4" }
]
#+END_EXAMPLE

If desired, you can define a template for your command to avoid repitition:

#+BEGIN_SRC emacs-lisp
  (defun my-command-template (params)
    (let ((args (plist-get params :args)))
      (list :headline (format "my command (%s)" args)
            :command (format "my-command %s" args)
            :columns '("foo" "bar"))))

  (add-to-list 'om-dash-templates
             '(my-command . my-command-template))
#+END_SRC

Then you can use it like this:

#+BEGIN_EXAMPLE
,#+BEGIN: om-dash-command :template my-command :args "arg1 arg2"
...
,#+END:
#+END_EXAMPLE

*** Custom Elisp function

Display table generated by a Elisp function.

#+BEGIN_EXAMPLE
,#+BEGIN: om-dash-function :fun my-function
...
,#+END:
#+END_EXAMPLE

[[./screenshot/elisp_function.png]]

The function should return table(s) to display as a plist:

#+BEGIN_SRC emacs-lisp
  (defun my-function ()
    ;; list of tables
    (list
     ;; table
     (list :keyword "TODO"
           :headline "example table"
           :column-names '("foo" "bar")
           :rows '(("a" "b")
                   ("c" "d")))))
#+END_SRC

** Contributions

So far I've implemented only things that I needed for my own workflow, plus some reasonable customization. I have quite limited time for this project, so if you would like to extend it for your workflow, pull requests are very welcome!

Also, as I've never created elisp packages before, I probably missed some conventions or best practices. Again, patches are welcome.

** Releases

Changelog file can be found here: [[./CHANGES.md][changelog]].

** Installation

Required external tools:

- [[https://cli.github.com/][gh]]
- [[https://jqlang.github.io/jq/][jq]]

To access private repos on github, follow [[https://cli.github.com/manual/gh_auth_login][official instructions]].

Elisp dependencies:

- [[https://github.com/alphapapa/org-ql][org-ql]]
- [[https://github.com/magnars/s.el][s.el]]
- [[https://github.com/alphapapa/ts.el][ts.el]]
- [[https://github.com/mrc/el-csv][el-csv]] (optional)

Package was tested on Emacs 28.2 on Linux.

Instructions for straight.el:

#+BEGIN_SRC emacs-lisp
  ;; required dependencies
  (straight-use-package 'org-ql)
  (straight-use-package 's)
  (straight-use-package 'ts)

  ;; optional
  (straight-use-package
   '(el-csv
    :type git
    :host github
    :repo "mrc/el-csv"
    :branch "master"
    :files ("parse-csv.el")))

  ;; om-dash
  (straight-use-package
   '(om-dash
    :type git
    :host github
    :repo "gavv/om-dash"
    :branch "main"
    :files ("om-dash.el")))
#+END_SRC

** Updater functions

The following functions can be used to update dynamic blocks (of any kind) in current document. You can bind them to =org-mode-map= or =om-dash-mode-map=.

#+BEGIN: om-dash--readme-symbol :symbol org-update-all-dblocks
*** org-update-all-dblocks
Update all dynamic blocks in the buffer.
This function can be used in a hook.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol org-dblock-update
*** org-dblock-update
User command for updating dynamic blocks.
Update the dynamic block at point.  With prefix ARG, update all dynamic
blocks in the buffer.

(fn &optional ARG)
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-update-tree
*** om-dash-update-tree
Update all dynamic blocks in current tree, starting from top-level entry.

E.g., for the following document:

#+BEGIN_EXAMPLE
  * 1.               ---o
  ** 1.1    <- cursor   |
  *** 1.1.1             | [tree]
  *** 1.1.2             |
  ** 1.2             ---o
  * 2.
  ** 2.1
#+END_EXAMPLE

the function updates all blocks inside 1., 1.1, 1.1.1, 1.1.2, 1.2.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-update-subtree
*** om-dash-update-subtree
Update all dynamic blocks in current subtree, starting from current entry.

E.g., for the following document:

#+BEGIN_EXAMPLE
  * 1.
  ** 1.1    <- cursor --o
  *** 1.1.1             | [subtree]
  *** 1.1.2           --o
  ** 1.2
  * 2.
  ** 2.1
#+END_EXAMPLE

the function updates all blocks inside 1.1, 1.1.1, 1.1.2.
#+END:

** Dynamic blocks

This section lists dynamic blocks implemented by =om-dash=. Each block named =om-dash-xxx= corresponds to a function named =org-dblock-write:om-dash-xxx=.

#+BEGIN: om-dash--readme-symbol :symbol org-dblock-write:om-dash-github-topics
*** om-dash-github-topics
Builds org heading with a table of github issues or pull requests.

Basic example:

#+BEGIN_EXAMPLE
  ,#+BEGIN: om-dash-github-topics :repo "owner/repo" :type issue :open "*" :closed "-1w"
  ...
  ,#+END:
#+END_EXAMPLE

More complicated query using simple syntax:

#+BEGIN_EXAMPLE
  ,#+BEGIN: om-dash-github-topics :repo "owner/repo" :type pullreq :open (:milestone "1.2.3" :label "blocker" :no-label "triage")
  ...
  ,#+END:
#+END_EXAMPLE

Same query but by providing github search query and jq selector:

#+BEGIN_EXAMPLE
  ,#+BEGIN: om-dash-github-topics :repo "owner/repo" :type pullreq :open ("milestone:1.2.3 label:blocker" ".labels | (.name == \"triage\") | not")
  ...
  ,#+END:
#+END_EXAMPLE

Parameters:

| parameter      | default                  | description                            |
|----------------+--------------------------+----------------------------------------|
| :repo          | required                 | github repo in form “<owner>/<repo>“   |
| :type          | required                 | topic type (=issue=, =pullreq=, =any=) |
| :any           | see below                | query for topics in any state          |
| :open          | see below                | query for topics in open state         |
| :closed        | see below                | query for topics in closed state       |
| :sort          | “createdAt“              | sort results by given field            |
| :fields        | =om-dash-github-fields=  | explicitly specify list of fields      |
| :limit         | =om-dash-github-limit=   | limit number of results                |
| :table-columns | =om-dash-github-columns= | list of columns to display             |
| :headline      | auto                     | text for generated org heading         |
| :heading-level | auto                     | level for generated org heading        |

Parameters =:any=, =:open=, and =:closed= define =QUERY= for topics in corresponding
states. You should specify either =:any= or =:open= and/or =:close=. Not specifying
anything is equavalent to :open "*".

=QUERY= can have one of the following forms:

 - plist: om-dash =SIMPLE-QUERY=, e.g.:
     (:milestone "1.2.3" :no-author "bob")

 - string: standard or extended =GITHUB-QUERY=, e.g.:
     "milestone:1.2.3"
     "*"
     "-1w"

 - list: two-element list with =GITHUB-QUERY= and =JQ-SELECTOR= strings, e.g.:
     ("milestone:1.2.3" ".author.login != "bob")

You can specify different queries for =:open= and =:closed= topics, e.g. to show all
open issues but only recently closed issues, use:

#+BEGIN_EXAMPLE
  :open "*" :closed "-1mo"
#+END_EXAMPLE

Or you can use a single query regardless of topic state:

#+BEGIN_EXAMPLE
  :any "-1mo"
#+END_EXAMPLE

=SIMPLE-QUERY= format is a convenient way to build queries for some typical
use cases. The query should be a =plist= with the following properties:

| property          | description                                             |
|-------------------+---------------------------------------------------------|
| :created-at       | include only topics created within given date range     |
| :updated-at       | include only topics updated within given date range     |
| :closed-at        | include only topics closed within given date range      |
| :milestone        | include only topics with any of given milestone(s)      |
| :no-milestone     | exclude topics with any of given milestone(s)           |
| :label            | include only topics with any of given label(s)          |
| :every-label      | include only topics with all of given label(s)          |
| :no-label         | exclude topics with any of given label(s)               |
| :author           | include only topics with any of given author(s)         |
| :no-author        | exclude topics with any of given author(s)              |
| :assignee         | include only topics with any of given assignee(s)       |
| :no-assignee      | exclude topics with any of given assignee(s)            |
| :reviewer         | include only topics with any of given reviewer(s)       |
| :no-reviewer      | exclude topics with any of given reviewer(s)            |
| :review-status    | include only topics with any of given review status(es) |
| :no-review-status | exclude topics with any of given review status(es)      |

All properties are optional (but at least one should be provided). Multiple
properties are ANDed, e.g. (:author "bob" :label "bug") matches topics with
author “bob“ AND label “bug“. Most properties support list form, in which case
its elements are ORed. E.g. (:author ("bob" "alice") :label "bug") matches
topics with label “bug“ AND author either “bob“ OR “alice“.

=:created-at=, =:updated-at=, =:closed-at= can have one of this forms:
 - "TIMESTAMP"
 - (> "TIMESTAMP")
 - (>= "TIMESTAMP")
 - (< "TIMESTAMP")
 - (<= "TIMESTAMP")
 - (range "TIMESTAMP" "TIMESTAMP")

Supported =TIMESTAMP= formats:

| format                      | description                 |
|-----------------------------+-----------------------------|
| “2024-02-20“                | date                        |
| “2024-02-20T15:59:59Z“      | utc date and time           |
| “2024-02-20T15:59:79+00:00“ | date and time with timezone |
| “-10d“                      | 10 days before today        |
| “-10w“                      | 10 weeks before today       |
| “-10mo“                     | 10 months before today      |
| “-10y“                      | 10 years before today       |

Examples:
#+BEGIN_EXAMPLE
  :created-at "2024-02-20"
  :updated-at (>= "-3mo")
#+END_EXAMPLE

=:milestone=, =:label=, =:author=, =:assignee=, and =:reviewer= properties, as
well as their =:no-xxx= counterparts, can be either a string (to match one value)
or a list of strings (to match any value from the list). Two special values are
supported: =*= matches if corresponding property (e.g. assignee) is non-empty,
and =-= matches if the property unset/empty.

Examples:
#+BEGIN_EXAMPLE
  :author "bob"
  :assignee "-"
  :no-label ("refactoring" "documentation")
#+END_EXAMPLE

=:every-label= is similar to =:label=, but it matches topics that have all of
the labels from the list, instead of any label from list.

=:review-status= property can be a symbol or a list of symbols
(to match any status from the list).

Supported values:

| status    | description                                                           |
|-----------+-----------------------------------------------------------------------|
| undecided | review not required, not requested, there're no approvals or rejects  |
| required  | review is required by repo rules                                      |
| requested | review is explicitly requested                                        |
| commented | some reviewers commented without approval or rejection                |
| approved  | all reviewers either approved or commented, and at least one approved |
| rejected  | some reviewers requested changes or dismissed review                  |

Examples:
#+BEGIN_EXAMPLE
  :review-status (required requested)
  :review-status approved
  :no-review-status (approved rejected commented)
#+END_EXAMPLE

GitHub review state model is complicated. These statuses is an attempt to provide
a simplified view of the review state for most common needs.

Note that not all statuses are mutually exclusive, in particular =required= can
co-exist with any status except =undecided=, and =commented= can co-exist with
any other status. You can match multiple statuses by providing a list.

=GITHUB-QUERY= is a string using github search syntax:
https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests

Besides standard syntax, a few extended forms are supported for github query:

| form     | description                                     |
|----------+-------------------------------------------------|
| “*“      | match all topics                                |
| “-123d“  | match if topic was updated during last 123 days |
| “-123w“  | same, but weeks                                 |
| “-123mo“ | same, but months                                |
| “-123y“  | same, but years                                 |

=JQ-SELECTOR= is an optional selector to filter results using jq command:
https://jqlang.github.io/jq/

Under the hood, this block uses combination of gh and jq commands like:

#+BEGIN_EXAMPLE
  gh -R <repo> issue list \
        --json <fields> --search <github query> --limit <limit> \
    | jq '[.[] | select(<jq selector>)]'
#+END_EXAMPLE

Exact commands being executed are printed to =*om-dash*= buffer
if =om-dash-verbose= is set.

By default, github query uses all fields from =om-dash-github-fields=, plus any
field from =om-dash-github-auto-enabled-fields= if it's present in jq selector.
The latter allows to exclude fields that makes queries slower, when they're
not used. To change this, you can specify =:fields= parameter explicitly.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol org-dblock-write:om-dash-github-project-cards
*** om-dash-github-project-cards
Builds org heading with a table of github =classic= project cards.

Note: if you're using new github projects (a.k.a. projects v2, a.k.a projects beta),
which are currently default, then use =om-dash-github-project-items= instead.

Usage example:
#+BEGIN_EXAMPLE
  ,#+BEGIN: om-dash-github-project-cards :repo "owner/repo" :type issue :project 123 :column "name"
  ...
  ,#+END:
#+END_EXAMPLE

Parameters:

| parameter      | default                  | description                            |
|----------------+--------------------------+----------------------------------------|
| :repo          | required                 | github repo in form “<owner>/<repo>“   |
| :type          | required                 | topic type (=issue=, =pullreq=, =any=) |
| :state         | =open=                   | topic state (=open=, =closed=, =any=)  |
| :project       | required                 | project identifier (number)            |
| :column        | required                 | project column name (string)           |
| :table-columns | =om-dash-github-columns= | list of columns to display             |
| :headline      | auto                     | text for generated org heading         |
| :heading-level | auto                     | level for generated org heading        |

=:type= defines that types of cards to display: issues, pull requests, or all.
=:state= defines whether to display open and closed issues and pull requests.

=:project= field specifies project numeric identifier (you can see it in URL on github).
=:column= field specifies string name of a project column.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol org-dblock-write:om-dash-orgfile
*** om-dash-orgfile
Builds org headings with tables based on another org file.

Basic usage:

#+BEGIN_EXAMPLE
  ,#+BEGIN: om-dash-orgfile :file "~/my/file.org" :query (:todo-depth 2 :done-depth 1)
  ...
  ,#+END:
#+END_EXAMPLE

Custom org-ql query:

#+BEGIN_EXAMPLE
  ,#+BEGIN: om-dash-orgfile :file "~/my/file.org" :query (todo "SOMEDAY")
  ...
  ,#+END:
#+END_EXAMPLE

Parameters:

| parameter      | default                       | description                            |
|----------------+-------------------------------+----------------------------------------|
| :file          | required                      | path to .org file                      |
| :query         | (:todo-depth 2 :done-depth 1) | query for org entries                  |
| :digest        | nil                           | generate single table with all entries |
| :table-columns | =om-dash-orgfile-columns=     | list of columns to display             |
| :headline      | auto                          | text for generated org headings        |
| :heading-level | auto                          | level for generated org headings       |

By default, this block generates an org heading with a table for every
top-level (i.e. level-1) org heading in specified =:file=, with nested
headings represented as table rows.

If =:digest= is t, a single table with all entries is generated instead.

=:query= defines what entries to retrieve from org file and add to table.
It should have one of the following forms:

 - plist: om-dash =SIMPLE-QUERY=, e.g. (:todo-depth 2 :done-depth 1)
 - list: =ORG-QL= sexp query, e.g. (todo "SOMEDAY")
 - string: =ORG-QL= string query, e.g. "todo:SOMEDAY"

=SIMPLE-QUERY= format is a convenient way to build queries for some typical
use cases. The query should be a =plist= with the following properties:

| property     | default | description                                          |
|--------------+---------+------------------------------------------------------|
| :todo-depth  | 2       | nesting level for “todo“ entries                     |
| :done-depth  | 1       | nesting level for “done“ entries                     |
| :category    | nil     | include only entries with any of given category(ies) |
| :no-category | nil     | exclide entries with any of given category(ies)      |
| :priority    | nil     | include only entries with any of given priority(ies) |
| :no-priority | nil     | exclide entries with any of given priority(ies)      |
| :tag         | nil     | include only entries with any of given tag(s)        |
| :every-tag   | nil     | include only entries with all of given tag(s)        |
| :no-tag      | nil     | exclide entries with any of given tag(s)             |
| :blocked     | any     | whether to include blocked entries                   |
| :habit       | any     | whether to include habit entries                     |

Properties =:todo-depth= and =:done-depth= limit how deep the tree is
traversed for top-level headings in “todo“ and “done“ states.

For example:

 - if =:todo-depth= is 0, then level-1 headings in “todo“ state are not
   shown at all

 - if =:todo-depth= is 1, then level-1 headings in “todo“ state are shown
   "collapsed", i.e. org heading is generated, but without table

 - if =:todo-depth= is 2, then level-1 headings in “todo“ state are shown
   and each has a table with its level-2 children

 - if =:todo-depth= is 3, then level-1 headings in “todo“ state are shown
   and each has a table with its level-2 and level-3 children

...and so on. Same applies to =:done-depth= parameter.

Whether a keyword is considered as “todo“ or “done“ is defined by
variables =om-dash-todo-keywords= and =om-dash-done-keywords=.
By default they are automatically populated from =org-todo-keywords-1=
and =org-done-keywords=, but you can set them to your own values.

=:category=, =:priority=, and =:tag= properties, as well as their =:no-xxx=
counterparts, can be either a string (to match one value) or a list of strings
(to match any value from the list).

Examples:
#+BEGIN_EXAMPLE
  :priority "A"
  :no-tag ("wip" "stuck")
#+END_EXAMPLE

=:every-tag= is similar to =:tag=, but it matches entries that have all of
the tags from the list, instead of any tag from list.

=:blocked= and =:habit= properties should be one of the three symbols: =any=
(ignore type), =yes= (include only entries of this type), =no= (exclude entries).

For =ORG-QL= sexp and string queries, see here:
https://github.com/alphapapa/org-ql?tab=readme-ov-file#queries

=:headline= parameter defines text for org headings which contains
tables. If =:digest= is t, there is only one table and =:headline=
is just a string. Otherwise, there are many tables, and =:headline=
is a format string where '%s' can be used for entry title.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol org-dblock-write:om-dash-imap
*** om-dash-imap
Builds org heading with a table of IMAP folder(s) and their unread mail counters.

Usage example:
#+BEGIN_EXAMPLE
  ,#+BEGIN: om-dash-imap :folder "foo/bar"
  ...
  ,#+END:
#+END_EXAMPLE

| parameter      | default                                | description                     |
|----------------+----------------------------------------+---------------------------------|
| :host          | =om-dash-imap-host=                    | IMAP server hostmame            |
| :port          | =om-dash-imap-port= or default         | IMAP server port                |
| :machine       | =om-dash-imap-machine= or host         | ~/.authinfo machine             |
| :user          | =om-dash-imap-user= or ~/.authinfo     | IMAP username                   |
| :password      | =om-dash-imap-password= or ~/.authinfo | IMAP password                   |
| :stream        | =om-dash-imap-stream= or auto          | STREAM for imap-open            |
| :auth          | =om-dash-imap-auth= or auto            | AUTH for imap-open              |
| :table-columns | =om-dash-imap-columns=                 | list of columns to display      |
| :headline      | auto                                   | text for generated org heading  |
| :heading-level | auto                                   | level for generated org heading |

=:host= and =:port= define IMAP server address.
Host must be always set, and port is optional.

=:user= and =:password= define IMAP credentials.
If not set, =om-dash-imap= will read them from ~/.authinfo.
If =:machine= is set, it's used to search ~/.authinfo, otherwise host is used.

=:stream= and =:auth= may be used to force =imap-open= to use specific
connection and authentification types. For example, you can use =network=
and =login= values to force plain-text unencrypted password.

All these parameters have corresponding variables (e.g. =om-dash-imap-host=
for =:host=) which are used if paremeter is omitted. Value is considered
unset when both parameter is omitted and variable is nil.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol org-dblock-write:om-dash-command
*** om-dash-command
Builds org heading with a table from output of a shell command.

Usage example:
#+BEGIN_EXAMPLE
  ,#+BEGIN: om-dash-command :command "curl -s https://api.github.com/users/octocat/repos" :format json :columns ("name" "forks_count")
  ...
  ,#+END:
#+END_EXAMPLE

| parameter      | default  | description                             |
|----------------+----------+-----------------------------------------|
| :command       | required | shell command to run                    |
| :columns       | required | column names (list of strings)          |
| :format        | =json=   | command output format (=json= or =csv=) |
| :headline      | auto     | text for generated org heading          |
| :heading-level | auto     | level for generated org heading         |

If =:format= is =json=, command output should be a JSON array of
JSON objects, which have a value for every key from =:columns=.

If =:format= is =csv=, command output should be CSV. First column
of CSV becomes value of first column from =:columns=, and so on.

Note: using CSV format requires installing =parse-csv= package
from https://github.com/mrc/el-csv
#+END:

#+BEGIN: om-dash--readme-symbol :symbol org-dblock-write:om-dash-function
*** om-dash-function
Builds org heading with a table from output of a elisp function.

Usage example:
#+BEGIN_EXAMPLE
  ,#+BEGIN: om-dash-function :fun example-func
  ...
  ,#+END:
#+END_EXAMPLE

| parameter      | default  | description                     |
|----------------+----------+---------------------------------|
| :function      | required | elisp function to call          |
| :args          | nil      | optional function arguments     |
| :headline      | auto     | text for generated org heading  |
| :heading-level | auto     | level for generated org heading |

The function should return a list of tables, where each table is
a =plist= with the following properties:

| property      | default  | description                                          |
|---------------+----------+------------------------------------------------------|
| :keyword      | =TODO=   | keyword for generated org heading                    |
| :headline     | auto     | text for generated org heading                       |
| :level        | auto     | level for generated org heading                      |
| :column-names | required | list of column names (strings)                       |
| :rows         | required | list of rows, where row is a list of cells (strings) |

If =:headline= or =:heading-level= is provided as the block parameter, it overrides
=:headline= or =:level= returned from function.

Example function that returns a single 2x2 table:

#+BEGIN_EXAMPLE
  (defun example-func ()
    ;; list of tables
    (list
     ;; table plist
     (list :keyword "TODO"
           :headline "example table"
           :column-names '("foo" "bar")
           :rows '(("a" "b")
                   ("c" "d")))))
#+END_EXAMPLE
#+END:

** Templates

This section lists built-in templates provided by =om-dash=. You can define your own templates via =om-dash-templates= variable.

#+BEGIN: om-dash--readme-symbol :symbol om-dash-github:milestone
*** om-dash-github:milestone
This template is OBSOLETE.
Use =om-dash-github-topics= with =:milestone= query instead.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-github:project-column
*** om-dash-github:project-column
This template is OBSOLETE.
Use =om-dash-github-project-items= or =om-dash-github-project-cards= dynamic blocks instead.
#+END:

** Minor mode

#+BEGIN: om-dash--readme-symbol :symbol om-dash-mode
*** om-dash-mode
om-dash minor mode.

This is a minor mode.  If called interactively, toggle the
'OM-Dash mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is =toggle=.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate =om-dash-mode=.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This minor mode for .org files enables additional highlighting inside
org tables generated by om-dash dynamic blocks.

Things that are highlighted:
 - table header and cell (text and background)
 - org-mode keywords
 - issue or pull request state, number, author
 - tags

After editing keywords list, you need to reactivate minor mode for
changes to take effect.

To active this mode automatically for specific files, you can use
local variables (add this to the end of the file):

#+BEGIN_EXAMPLE
  # Local Variables:
  # eval: (om-dash-mode 1)
  # End:
#+END_EXAMPLE
#+END:

** Variables

#+BEGIN: om-dash--readme-symbol :symbol om-dash-todo-keywords
*** om-dash-todo-keywords
List of keywords considered as TODO.

If block has any of the TODO keywords, block's heading becomes TODO.
The first element from this list is used for block's heading in this case.

If a keyword from this list doesn't have a face in =om-dash-keyword-faces=,
it uses default TODO keyword face.

When nil, filled automatically from =org-todo-keywords=, =org-done-keywords=,
and pre-defined github keywords.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-done-keywords
*** om-dash-done-keywords
List of keywords considered as DONE.

If block doesn't have any of the TODO keywords, block's heading becomes DONE.
The first element from this list is used for block's heading in this case.

If a keyword from this list doesn't have a face in =om-dash-keyword-faces=,
it uses default DONE keyword face.

When nil, filled automatically from =org-todo-keywords=, =org-done-keywords=,
and pre-defined github keywords.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-keyword-faces
*** om-dash-keyword-faces
Assoc list to map keywords to faces.

If some keyword is not mapped to a face explicitly, default face is selected,
using face for TODO or DONE depending on whether that keyword is in
=om-dash-todo-keywords= or =om-dash-done-keywords=.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-tag-map
*** om-dash-tag-map
Assoc list to remap or unmap tag names.

Defines how tags are displayed in table.
You can map tag name to a different string or to nil to hide it.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-templates
*** om-dash-templates
Assoc list of expandable templates for om-dash dynamic blocks.

Each entry is a cons of two symbols: template name and template function.

When you pass ":template foo" as an argument to a dynamic block, it finds
a function in this list by key =foo= and uses it to "expand" the template.

This function is invoked with dynamic block parameters plist and should
return a new plist. The new plist is used to update the original
parameters by appending new values and overwriting existing values.

For example, if =org-dblock-write:om-dash-github-topics= block has parameters:
#+BEGIN_EXAMPLE
  (:repo "owner/repo"
   :type 'issue
   :template project-column
   :project 123
   :column "In progress")
#+END_EXAMPLE

Dynamic block will use =project-column= as a key in =om-dash-templates=
and find =om-dash-github:project-column= function.

The function is invoked with the original parameter list, and returns
a modified parameter list:
#+BEGIN_EXAMPLE
  (:repo "owner/repo"
   :type 'issue
   :open ("project:owner/repo/123"
          ".projectCards[] | (.column.name == \"In progress\")")
   :closed ""
   :headline "issues (owner/repo \"1.2.3\")")
#+END_EXAMPLE

Then modified parameters are interpreted by dynamic block as usual.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-table-fixed-width
*** om-dash-table-fixed-width
If non-nil, align tables to have given fixed width.
If nil, tables have minimum width that fits their contents.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-table-squeeze-empty
*** om-dash-table-squeeze-empty
If non-nil, automatically remove empty columns from tables.
E.g. if every row has empty tags, :tags column is removed from this table.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-table-link-style
*** om-dash-table-link-style
How links are generated in om-dash tables.

Allowed values:
 - :none - no links are inserted
 - :text - only cell text becomes a link
 - :cell - whole cell becomes a link
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-github-columns
*** om-dash-github-columns
Column list for =om-dash-github-topics= table.

Supported values:

| symbol      | example           |
|-------------+-------------------|
| :state      | OPEN, CLOSED, ... |
| :number     | #123              |
| :author     | @octocat          |
| :assignee   | @octocat,@github  |
| :milestone  | 1.2.3             |
| :title      | text              |
| :title-link | [​[link][text]]    |
| :tags       | :tag1:tag2:...:   |
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-orgfile-columns
*** om-dash-orgfile-columns
Column list for =om-dash-orgfile= table.

Supported values:

| symbol      | example         |
|-------------+-----------------|
| :state      | TODO, DONE, ... |
| :title      | text            |
| :title-link | [​[link][text]]  |
| :tags       | :tag1:tag2:...: |
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-imap-columns
*** om-dash-imap-columns
Column list for =om-dash-imap= table.

Supported values:

| symbol  |            example |
|---------+--------------------|
| :state  | NEW, UNREAD, CLEAN |
| :new    |                 10 |
| :unread |                 20 |
| :total  |                 30 |
| :folder |            foo/bar |
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-github-limit
*** om-dash-github-limit
Default limit for github queries.

E.g. if you query "all open issues" or "closed issues since january",
only last =om-dash-github-limit= results are returned.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-github-fields
*** om-dash-github-fields
List of json fields enabled by default in github queries.

This defines which fields are present in github responses and hence can
be used in jq selectors.

We don't enable all fields by default because some of them noticeably
slow down response times.

There is also =om-dash-github-auto-enabled-fields=, which defines fields
that are enabled automatically for a query if jq selector contains them.

In addition, =org-dblock-write:om-dash-github-*= accept =:fields=
parameter, which can be used to overwrite fields list per-block.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-github-auto-enabled-fields
*** om-dash-github-auto-enabled-fields
List of json fields automatically enabled on demand in github queries.

See =om-dash-github-fields= for more details.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-imap-host
*** om-dash-imap-host
Default IMAP server hostname.

Used by =om-dash-imap= if =:host= parameter is not provided.
Host must be always set, either via =:host= or =om-dash-imap-host=.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-imap-port
*** om-dash-imap-port
Default IMAP server port number.

Used by =om-dash-imap= if =:port= parameter is not provided.
If port is not set, default IMAP port is used.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-imap-machine
*** om-dash-imap-machine
Default ~/.authinfo machine for IMAP server.

Used by =om-dash-imap= if =:machine= parameter is not provided.
If machine is not set, value of host is used.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-imap-user
*** om-dash-imap-user
Default username for IMAP server.

Used by =om-dash-imap= if =:user= parameter is not provided.
If user is not set, it's read from ~/.authinfo.
See also =om-dash-imap-machine=.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-imap-password
*** om-dash-imap-password
Default username for IMAP server.

Used by =om-dash-imap= if =:password= parameter is not provided.
If password is not set, it's read from ~/.authinfo.
See also =om-dash-imap-machine=.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-imap-stream
*** om-dash-imap-stream
Default STREAM parameter for =imap-open=.

Used by =om-dash-imap= if =:stream= parameter is not provided.
Must be one of the values from =imap-streams=.
If nil, detected automatically.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-imap-auth
*** om-dash-imap-auth
Default AUTH parameter for =imap-open=.

Used by =om-dash-imap= if =:auth= parameter is not provided.
Must be one of the values from =imap-authenticators=.
If nil, detected automatically.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-imap-empty-folders
*** om-dash-imap-empty-folders
Whether to display empty IMAP folders.
If nil, empty folders are excluded from the table.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-verbose
*** om-dash-verbose
Enable verbose logging.
If non-nill, all commands and queries are logged to =*om-dash*= buffer.
#+END:

** Faces

#+BEGIN: om-dash--readme-symbol :symbol om-dash-header-cell
*** om-dash-header-cell
Face used for entire cell in om-dash table header.
You can use it so specify header background.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-header-text
*** om-dash-header-text
Face used for text in om-dash table header.
You can use it so specify header font.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-cell
*** om-dash-cell
Face used for entire non-header cell in om-dash table.
You can use it so specify cell background.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-text
*** om-dash-text
Face used for text in om-dash table non-header cell.
You can use it so specify cell font.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-number
*** om-dash-number
Face used for issue or pull request numbers in om-dash tables.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-author
*** om-dash-author
Face used for issue or pull request authors in om-dash tables.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-todo-keyword
*** om-dash-todo-keyword
Face used for =TODO= keyword in om-dash tables.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-done-keyword
*** om-dash-done-keyword
Face used for =DONE= keyword in om-dash tables.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-open-keyword
*** om-dash-open-keyword
Face used for =OPEN= keyword in om-dash tables.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-merged-keyword
*** om-dash-merged-keyword
Face used for =MERGED= keyword in om-dash tables.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-closed-keyword
*** om-dash-closed-keyword
Face used for =CLOSED= keyword in om-dash tables.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-new-keyword
*** om-dash-new-keyword
Face used for =NEW= keyword in om-dash tables.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-unread-keyword
*** om-dash-unread-keyword
Face used for =UNREAD= keyword in om-dash tables.
#+END:

#+BEGIN: om-dash--readme-symbol :symbol om-dash-clean-keyword
*** om-dash-clean-keyword
Face used for =CLEAN= keyword in om-dash tables.
#+END:

** Authors

See [[./AUTHORS.md][here]].

** License

[[LICENSE][GPLv3+]]
